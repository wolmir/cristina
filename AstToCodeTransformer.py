from astmonkey import visitors

#Don't know if they fixed this yet.
class SourceGeneratorNodeVisitorFix(visitors.SourceGeneratorNodeVisitor):
    def visit_TryExcept(self, node):
        self.newline(node)
        self.write('try:')
        self.body(node.body)
        for handler in node.handlers:
            self.visit(handler)
        if node.orelse:
            self.newline()
            self.write('else:')
            self.body(node.orelse)

def to_source(node, indent_with=' ' * 4):
    """This function can convert a node tree back into python sourcecode.
    This is useful for debugging purposes, especially if you're dealing with
    custom asts not generated by python itself.

    It could be that the sourcecode is evaluable when the AST itself is not
    compilable / evaluable.  The reason for this is that the AST contains some
    more data than regular sourcecode does, which is dropped during
    conversion.

    Each level of indentation is replaced with `indent_with`.  Per default this
    parameter is equal to four spaces as suggested by PEP 8, but it might be
    adjusted to match the application's styleguide.
    """
    generator = SourceGeneratorNodeVisitorFix(indent_with)
    generator.visit(node)

    return  ''.join(generator.result)


class AstToCodeTransformer:
    @staticmethod
    def transform(ast_node):
        return to_source(ast_node)